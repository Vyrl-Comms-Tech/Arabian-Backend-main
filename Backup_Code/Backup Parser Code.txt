const axios = require("axios");
const xml2js = require("xml2js");
const SavePropertInDb = require("../Models/PropertyModel");

const allProperties = [];
const saleProperties = [];
const rentProperties = [];
let totalCount = 0;

// Parsing the xml file and saving the properties
const XmlParseFunction = async (req, res, next) => {
  console.log("Starting XML fetch and parse...");

  // XML feed URL
  const xmlUrl =
    "https://manda.propertybase.com/api/v2/feed/00D8d000005AHV4EAO/generic/a0h8d000001Cz2XAAS/full";
  try {
    console.log(`Fetching XML from: ${xmlUrl}`);

    // Step 1: Fetch the XML data from the URL
    const response = await axios.get(xmlUrl, {
      headers: {
        Accept: "application/xml",
      },
    });

    // Step 2: Configure the XML parser
    const parser = new xml2js.Parser({
      explicitArray: false, // Don't put single values in arrays
      mergeAttrs: true, // Merge attributes with element content
      normalize: true, // Trim whitespace
      normalizeTags: false, // Don't convert tags to lowercase
      trim: true, // Trim whitespace from text nodes
    });

    // Step 3: Parse the XML data
    const result = await parser.parseStringPromise(response.data);

    // Step 4: Extract and process the data

    // Determine where the property listings are in the data structure
    if (result && Array.isArray(result)) {
      // Direct array structure
      allProperties.push(...result);
      totalCount = result.length;
    } else if (result.listings && Array.isArray(result.listings.listing)) {
      // listings > listing array structure
      allProperties.push(...result.listings.listing);
      totalCount = result.listings.listing.length;
    } else if (result.listings && result.listings.listing) {
      // Single listing in listings
      allProperties.push(result.listings.listing);
      totalCount = 1;
    } else {
      // Search for any array in the result that might contain property listings
      const findPropertiesArray = (obj) => {
        for (const key in obj) {
          if (
            Array.isArray(obj[key]) &&
            obj[key].length > 0 &&
            obj[key][0] &&
            (obj[key][0].general_listing_information || obj[key][0].id)
          ) {
            return obj[key];
          } else if (typeof obj[key] === "object" && obj[key] !== null) {
            const found = findPropertiesArray(obj[key]);
            if (found) return found;
          }
        }
        return null;
      };

      const propertiesArray = findPropertiesArray(result);
      if (propertiesArray) {
        allProperties.push(...propertiesArray);
        totalCount = propertiesArray.length;
      }
    }

    // If we still don't have properties, look for them as direct properties
    if (allProperties.length === 0) {
      console.log("No property array found!!!");
      return res.status(404).json({
        success: false,
        message: "No property listings found in the XML data",
      });
    }

    // Step 5: Separate properties based on listingtype (Sale or Rent)

    allProperties.forEach((property) => {
      // Extract the listing type from general_listing_information
      if (
        property.general_listing_information &&
        property.general_listing_information.listingtype
      ) {
        const listingType =
          property.general_listing_information.listingtype.toLowerCase();

        // Add to appropriate array based on listing type
        if (listingType === "sale") {
          saleProperties.push(property);
        } else if (listingType === "rent") {
          rentProperties.push(property);
        } else {
          // Log unusual listing types
          console.log(
            `Property ${property.id} has unusual listing type: ${listingType}`
          );
        }
      } else {
        // Handle properties without listing type information
        console.log(
          `Property ${property.id} is missing listing type information`
        );
      }
    });

    // Log counts for debugging
    console.log(`Total properties: ${totalCount}`);
    console.log(`Sale properties: ${saleProperties.length}`);
    console.log(`Rent properties: ${rentProperties.length}`);

    const savePropertyToDb = async (propertyData) => {
      try {
        console.log("Starting to save property to database...");
        console.log(`Property ID: ${propertyData.id}`);

        // Check if the property already exists
        const existingProperty = await SavePropertInDb.findOne({
          id: propertyData.id,
        });

        if (existingProperty) {
          console.log(
            `Property with ID ${propertyData.id} already exists, updating...`
          );

          // Update existing property
          Object.assign(existingProperty, propertyData);
          const updatedProperty = await existingProperty.save();

          console.log(`Property ${updatedProperty.id} updated successfully`);
          return updatedProperty;
        } else {
          console.log(`Creating new property with ID ${propertyData.id}...`);

          // Create new property document
          const property = new SavePropertInDb(propertyData);
          const savedProperty = await property.save();

          console.log(`Property ${savedProperty.id} saved successfully`);
          console.log(
            `Title: ${savedProperty.general_listing_information.listing_title}`
          );
          console.log(`Price: ${savedProperty.getFormattedPrice()}`);
          console.log(
            `Type: ${savedProperty.general_listing_information.listingtype}`
          );
          console.log(
            `Location: ${savedProperty.custom_fields.community_name}`
          );

          return savedProperty;
        }
      } catch (error) {
        console.error("Error saving property to database:", error);
        throw error;
      }
    };
    savePropertyToDb(allProperties[1]);

    // Return the separated arrays
    return res.status(200).json({
      success: true,
      message: "XML data fetched and parsed successfully",
      TotalProperties: totalCount,
      TotalSaleProperties: saleProperties.length,
      TotalRentProperties: rentProperties.length,
      saleProperties: saleProperties,
      rentProperties: rentProperties,
    });
  } catch (err) {
    console.log("Error occurred while fetching or parsing XML:", err);
    return res.status(500).json({
      success: false,
      message: "Error occurred while fetching or parsing XML",
      error: err.message,
    });
  }
};

module.exports = { XmlParseFunction };
